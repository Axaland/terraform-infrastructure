name: terraform-ci

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Environment"
        required: true
        options: [dev, stage, prod]
      apply:
        type: boolean
        description: "Apply changes?"
        default: false
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-west-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_CI_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Select environment path
        id: envpath
        run: |
          ENV=${{ github.event.inputs.environment || 'dev' }}
          echo "env_dir=infra/terraform/${ENV}" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: ${{ steps.envpath.outputs.env_dir }}
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: ${{ steps.envpath.outputs.env_dir }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ steps.envpath.outputs.env_dir }}
        run: terraform plan -input=false

      - name: Terraform Apply (conditional)
        if: ${{ github.event.inputs.apply == 'true' }}
        working-directory: ${{ steps.envpath.outputs.env_dir }}
        run: terraform apply -input=false -auto-approve

  build-push:
    needs: terraform
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.apply == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_CI_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPO: app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG
